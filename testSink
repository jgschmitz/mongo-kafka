# Kafka Test
from pymongo import MongoClient
from pymongo.errors import PyMongoError
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# MongoDB configuration
MONGO_URI = "mongodb://localhost:27017/"
DB_NAME = "test"
COLLECTION_NAME = "sink"

# MongoDB connection
client = MongoClient(MONGO_URI)
db = client[DB_NAME]
collection = db[COLLECTION_NAME]

# Function to process the change stream event
def process_change_event(change_event):
    try:
        # Log the received event
        logging.info(f"Processing change event: {change_event}")

        # Extract relevant data
        operation_type = change_event.get("operationType")
        full_document = change_event.get("fullDocument", {})
        resume_token = change_event["_id"]["_data"]

        # Handle specific operations
        if operation_type == "insert":
            handle_insert(full_document)
        elif operation_type == "update":
            handle_update(change_event)
        elif operation_type == "delete":
            handle_delete(change_event)

        # Store or log the resume token
        logging.info(f"Resume token: {resume_token}")

    except KeyError as e:
        logging.error(f"Key error in event: {e}")
    except PyMongoError as e:
        logging.error(f"MongoDB error: {e}")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")

# Handlers for different operation types
def handle_insert(document):
    logging.info(f"Insert operation: {document}")
    # Add processing logic for inserts

def handle_update(change_event):
    logging.info(f"Update operation: {change_event}")
    # Add processing logic for updates

def handle_delete(change_event):
    logging.info(f"Delete operation: {change_event}")
    # Add processing logic for deletes

# Main function to watch the collection
def watch_collection():
    try:
        with collection.watch() as change_stream:
            logging.info(f"Watching collection: {COLLECTION_NAME}")
            for change in change_stream:
                process_change_event(change)
    except PyMongoError as e:
        logging.error(f"Error with MongoDB change stream: {e}")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")

# Entry point
if __name__ == "__main__":
    watch_collection()
